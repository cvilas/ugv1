//==============================================================================
// Project  : UGV1
// Module   : Agent
// File     : AgentException.h
// Brief    : Exceptions generated by agents
//==============================================================================

#ifndef UGV1_AGENTEXCEPTION_H
#define UGV1_AGENTEXCEPTION_H

#include <core/Exception.h>
#include "agent_common.h"

namespace Ugv1
{
    /// \brief common base class for exceptions thrown by agents
    /// \ingroup agent_exceptions
    class UGV1AGENT_DLL_API AgentException : public Grape::Exception
    {
    public:
        AgentException() throw() : Exception(0, "Unspecified Agent Exception") {}
        AgentException(int code, const std::string& msg) throw() : Exception(code, msg.c_str()) {}
        AgentException(const AgentException& ve) throw() : Exception(ve) {}
        AgentException& operator=(const AgentException& other) throw() { Exception::operator=(other); return *this; }
    }; // AgentException

    /// \brief Exception raised when dealing with configuration file
    /// \ingroup agent_exceptions
    class UGV1AGENT_DLL_API ConfigException : public AgentException
    {
    public:
        ConfigException() throw() : AgentException(0, "Configuration exception") {}
        ConfigException(int code, const std::string& msg) throw() : AgentException(code, msg) {}
        ConfigException(const ConfigException& ve) throw() : AgentException(ve) {}
        ConfigException& operator=(const ConfigException& other) throw() { AgentException::operator=(other); return *this; }
    }; // ConfigException

    /// \brief Exception raised by messenger backend
    /// \ingroup agent_exceptions
    class UGV1AGENT_DLL_API MessengerException : public AgentException
    {
    public:
        MessengerException() throw() : AgentException(0, "Messenger exception") {}
        MessengerException(int code, const std::string& msg) throw() : AgentException(code, msg) {}
        MessengerException(const MessengerException& ve) throw() : AgentException(ve) {}
        MessengerException& operator=(const MessengerException& other) throw() { AgentException::operator=(other); return *this; }
    }; // MessengerException

} // Ugv1

#endif // UGV1_AGENTEXCEPTION_H
